name: CI/CD Pipeline

on:
  push:
    branches:
      - main

jobs:
  # Stage 1: Build and Push Docker Images
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      # Checkout the repository
      - name: Checkout code
        uses: actions/checkout@v4

      # Set up Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Log in to Docker Hub
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # Determine which service changed
      - name: Detect changed services
        id: changed
        run: |
          CHANGED_DIRS=$(git diff --name-only HEAD^ HEAD | grep -E 'zyra-.*-service' | awk -F '/' '{print $1}' | sort -u)
          echo "CHANGED_DIRS=$CHANGED_DIRS" >> $GITHUB_OUTPUT

      # Build and push Docker images for changed services
      - name: Build and push Docker images
        if: steps.changed.outputs.CHANGED_DIRS != ''
        run: |
          for service in ${{ steps.changed.outputs.CHANGED_DIRS }}; do
            cd $service
            docker build -t devathul/zyra-moments-${service#zyra-}:latest -f dockerfile .
            docker push devathul/zyra-moments-${service#zyra-}:latest
            cd ..
          done

  # Stage 2: Deploy to EC2
  deploy-ec2:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      # Checkout the repository
      - name: Checkout code
        uses: actions/checkout@v4

      # Set up SSH key for EC2
      - name: Install SSH key
        run: |
          echo "${{ secrets.EC2_SSH_KEY }}" > ssh_key
          chmod 600 ssh_key

      # Deploy to EC2
      - name: Deploy to EC2
        run: |
          ssh -o StrictHostKeyChecking=no -i ssh_key ubuntu@${{ secrets.EC2_HOST }} << 'EOF'

            docker compose down { echo "Docker compose down failed"; exit 1; }
      
            # Pull the latest images
            docker compose pull || { echo "Docker compose pull failed"; exit 1; }

            # Restart containers
            docker compose up -d || { echo "Docker compose up failed"; exit 1; }
          EOF